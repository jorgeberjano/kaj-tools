package es.jbp.kajtools.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import es.jbp.kajtools.IMessageClient;
import es.jbp.kajtools.util.SchemaRegistryService;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.border.TitledBorder;
import lombok.Getter;
import org.springframework.stereotype.Component;

public class MainForm {

  private final SchemaRegistryService schemaRegistryService;
  private final ComponentFactory componentFactory;
  private final List<IMessageClient> clientList;

  private JTabbedPane tabbedPane;
  @Getter
  private JPanel contentPane;
  private JPanel panelProducer;
  private JPanel panelJson;
  private JPanel panelSchema;
  private JPanel panelConsumer;

  public MainForm(ComponentFactory componentFactory,
      SchemaRegistryService schemaRegistryService,
      List<IMessageClient> clientList) {
    this.componentFactory = componentFactory;
    this.schemaRegistryService = schemaRegistryService;
    this.clientList = clientList;

// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
   * code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.putClientProperty("html.disable", Boolean.FALSE);
    tabbedPane = new JTabbedPane();
    tabbedPane.setTabPlacement(2);
    contentPane.add(tabbedPane,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200),
            null, 0, false));
    tabbedPane.addTab("Producer", new ImageIcon(getClass().getResource("/images/kafka.png")), panelProducer,
        "Producir eventos Kafka");
    panelProducer.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createEmptyBorder(), "Kafka producer", TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION, null, null));
    tabbedPane.addTab("Consumer", new ImageIcon(getClass().getResource("/images/akfak.png")), panelConsumer,
        "Consumir eventos Kafka");
    panelConsumer.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createEmptyBorder(), "Kafka consumer", TitledBorder.DEFAULT_JUSTIFICATION,
            TitledBorder.DEFAULT_POSITION, null, null));
    tabbedPane.addTab("Schema", new ImageIcon(getClass().getResource("/images/schemaregistry.png")), panelSchema);
    panelSchema.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0), "Schema Registry",
            TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    tabbedPane.addTab("JSON", new ImageIcon(getClass().getResource("/images/json.png")), panelJson,
        "Generar Json y esquemas");
    panelJson.setBorder(BorderFactory
        .createTitledBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0), "JSON generator",
            TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }

  private void createUIComponents() {
    panelProducer = new KafkaProducerPanel(componentFactory, schemaRegistryService, clientList).getContentPane();
    panelConsumer = new KafkaConsumerPanel(componentFactory, clientList).getContentPane();
    panelSchema = new SchemaRegistryPanel(componentFactory, clientList, schemaRegistryService).getContentPane();
    panelJson = new JsonGeneratorPanel(componentFactory).getContentPane();
  }
}
