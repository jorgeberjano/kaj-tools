package es.jbp.kajtools.ui;

import es.jbp.kajtools.ui.interfaces.DialogueablePanel;
import es.jbp.kajtools.ui.interfaces.InfoReportablePanel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import lombok.Getter;

public class InfoPanel implements DialogueablePanel, InfoReportablePanel {

  private JTextPane infoTextPane;
  private JTextField searchTextField;
  @Getter
  private JPanel mainPanel;


  @Override
  public void bindDialog(JDialog dialog) {

  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
   * code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    mainPanel = new JPanel();
    mainPanel.setLayout(new BorderLayout(0, 0));
    final JScrollPane scrollPane1 = new JScrollPane();
    mainPanel.add(scrollPane1, BorderLayout.CENTER);
    infoTextPane.setBackground(new Color(-16777216));
    infoTextPane.setCaretColor(new Color(-1));
    infoTextPane.setEditable(false);
    Font infoTextPaneFont = this.$$$getFont$$$("Consolas", -1, 12, infoTextPane.getFont());
    if (infoTextPaneFont != null) {
      infoTextPane.setFont(infoTextPaneFont);
    }
    infoTextPane.setForeground(new Color(-1));
    infoTextPane.setText("");
    infoTextPane.putClientProperty("charset", "");
    scrollPane1.setViewportView(infoTextPane);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new BorderLayout(0, 0));
    mainPanel.add(panel1, BorderLayout.SOUTH);
    final JLabel label1 = new JLabel();
    label1.setIcon(new ImageIcon(getClass().getResource("/images/search.png")));
    label1.setText("");
    panel1.add(label1, BorderLayout.WEST);
    searchTextField = new JTextField();
    searchTextField.setText("");
    panel1.add(searchTextField, BorderLayout.CENTER);
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) {
      return null;
    }
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(),
        size >= 0 ? size : currentFont.getSize());
    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
    Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize())
        : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
    return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }

  public void setDocument(InfoDocument document) {
    document.getMessages().forEach(this::printMessage);
    infoTextPane.setCaretPosition(0);
  }

  @Override
  public InfoTextPane getInfoTextPane() {
    return (InfoTextPane) infoTextPane;
  }

  private void createUIComponents() {
    infoTextPane = new InfoTextPane();
  }
}
